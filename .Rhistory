mods.RA.SPO[[1]]<- mod
names(mods.RA.SPO[1])
names(mods.RA.SPO[1]) = 'siderophores'
mods.RA.SPO
mods.RA.SPO[[1]]
mods.RA.SPO<- vector('list', length = 6)
names(mods.RA.SPO)<- c('siderophores', 'biofilm', 'secretome', 'quorum_sensing', 'ab_degradation', 'sescretion_systems')
mods.RA.SPO$siderophores = mod
colnames(dat)
dat = d_mean
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
dat = d_mean
prior = prior.1
phylogeny_inverse_matrix = Ainv
mods.RA.SPO<- vector('list', length = 6)
names(mods.RA.SPO)<- c('siderophores', 'biofilm', 'secretome', 'quorum_sensing', 'ab_degradation', 'secretion_systems')
mods.RA.SPO$siderophores = mod
dat = d_mean
response = 'biofilm'
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
names(dat)[names(dat) == response] <- 'response_of_interest'
mods.RA.SPO$biofilm<- MCMCglmm(response_of_interest ~ mean_relative_abundance + sporulation_score + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=phylogeny_inverse_matrix),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat = d_mean
response = 'quorum_sensing'
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
names(dat)[names(dat) == response] <- 'response_of_interest'
mods.RA.SPO$quorum_sensing<- MCMCglmm(response_of_interest ~ mean_relative_abundance + sporulation_score + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=phylogeny_inverse_matrix),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat = d_mean
response = 'ab_degradation'
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
names(dat)[names(dat) == response] <- 'response_of_interest'
mods.RA.SPO$ab_degradation<- MCMCglmm(response_of_interest ~ mean_relative_abundance + sporulation_score + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=phylogeny_inverse_matrix),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat = d_mean
response = 'secretion_system_no4'
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
names(dat)[names(dat) == response] <- 'response_of_interest'
mods.RA.SPO$sescretion_systems<- MCMCglmm(response_of_interest ~ mean_relative_abundance + sporulation_score + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=phylogeny_inverse_matrix),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat = d_mean_109
response = 'nb_extracellular'
phylogeny_inverse_matrix = Ainv_109
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
names(dat)[names(dat) == response] <- 'response_of_interest'
mods.RA.SPO$secretome<- MCMCglmm(response_of_interest ~ mean_relative_abundance + sporulation_score + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=phylogeny_inverse_matrix),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
summary(mods.RA.SPO$siderophores)
summary(mods.RA.SPO$biofilm)
summary(mods.RA.SPO$secretome)
summary(mods.RA.SPO$quorum_sensing)
summary(mods.RA.SPO$ab_degradation)
summary(mods.RA.SPO$sescretion_systems)
summary(mods.RA.SPO$secretion_systems)
save.image("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL_OUTPUT_R_SPO.RData")
plot(d_mean$nb_extracellular ~ d_mean$secretion_system_no4, pch = 16)
plot(d_mean$nb_extracellular ~ d_mean$secretion_system_no4, pch = 16, col = gram_profile)
plot(d_mean$nb_extracellular ~ d_mean$secretion_system_no4, pch = 16, col = d_mean$gram_profile)
plot(d_mean$nb_extracellular ~ d_mean$secretion_system_no4, pch = 16, col = as.factor(d_mean$gram_profile))
dat = d_mean
mod.nbExtra_Ssyst<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4 + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = d_mean_109,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == 'nb_extracellular')]
mod.nbExtra_Ssyst<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4 + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = d_mean_109,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat<- d_mean_109
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == 'nb_extracellular')]
mod.nbExtra_Ssyst<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4 + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
summary(mod.nbExtra_Ssyst)
mod.nbExtra_Ssyst.R<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4*mean_relatedness + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
summary(mod.nbExtra_Ssyst.R)
quant_go_sociality_2<- function(species, focal_behaviour, social_go_list, path_to_panzzer_output, path_to_patric_features){
social_gos<- social_go_list
# Reading panzzer output (i.e. GO annotation of CDS), keep best hit only, do some housekeeping
# Each peg can be present in the table up to three times: once for each of the three GO ontologies
sp<- read.csv(paste0(path_to_panzzer_output, species, '.GO.out'), header=TRUE, sep = '\t', colClasses = c(rep('character', 4), rep('numeric', 3)))
sp<- sp[sp$ARGOT_rank == 1,]
sp<- sp[,1:4]
colnames(sp)<- c('peg', 'Ontology', 'GO_id', 'Description')
sp$GO_id<- paste0('GO:', sp$GO_id)
# open original PATRIC table of that species
sp_cds<- read.csv(paste0(path_to_patric_features, species, '.features'), header = TRUE, sep = '\t')
sp_cds<- sp_cds[sp_cds$feature_type == 'CDS', c('patric_id', 'product', 'go')]
sp_cds$patric_id<- as.character(sp_cds$patric_id)
sp_cds$product<- as.character(sp_cds$product)
sp_cds$go<- as.character(sp_cds$go)
colnames(sp_cds)<- c('peg', 'product_patric', 'go_patric')
# Intersect with panzzer table to get for each peg, the GO assigned by panzzer
sp$peg<- paste0(do.call('rbind', strsplit(sp$peg, '\\|'))[,1], '|', do.call('rbind', strsplit(sp$peg, '\\|'))[,2])
# Check that all peg names in the panzzer output table are in the peg names of the PATRIC table
checkpoint<- ifelse(length(which(sp$peg %in% sp_cds$peg == FALSE)) == 0, 'ok', 'not_ok')
print(paste0('checkpoint 1 : ', checkpoint))
sp_cds_annot<- full_join(sp_cds, sp, 'peg')
# record proportion of pegs now annotated
tmp<- sp_cds_annot[,c('peg', 'GO_id')] # take just pegs and GO annotation by panzzer
tmp<- tmp[is.na(tmp$GO_id) == FALSE,] # remove all those with annotation
# intersect with social GO list = quantify sociality
sp_cds_annot$is_focal_behaviour <- sp_cds_annot$GO_id %in% social_gos[social_gos$behaviour == focal_behaviour,1]
# Also record for each term the number of time it was hit in that species --> to check the contribution of each term to a behaviour quantification
social_gos_focus<- social_gos[social_gos$behaviour == focal_behaviour, ]
go_contribution<- as.data.frame(table(sp_cds_annot$GO_id)) #%>% rename(GO_id = Var1) %>% right_join(social_gos_focus, 'GO_id')
colnames(go_contribution)<- c('GO_id', 'Freq')
go_contribution<- right_join(go_contribution, social_gos_focus, 'GO_id')
go_contribution[is.na(go_contribution$Freq) == TRUE,'Freq']<- 0
names(go_contribution)[2]<- species
go_contribution<- go_contribution[,c(1,3,5,2)]
sp_cds_annot2<- sp_cds_annot[,c('peg', 'Description', 'is_focal_behaviour')]
sp_cds_annot2$is_annotated<- ifelse(is.na(sp_cds_annot2$Description) == TRUE, 0, 1)
# Each peg can be present up to three times, because we retain the top hit GO match for all three ontologies
# But when a peg is assigned to e.g. biofilm by both its BP and CC for example, we don't count it as twice biofilm
# basically if either of the ontologies GO of a given peg falls in one social behaviour this peg is counted as being part of that social behaviour
# The following thus converts those potential 'multiple hits' into binary 0/1
test<- sp_cds_annot2 %>% group_by(peg) %>% summarise(focal_behaviour_counts = sum(is_focal_behaviour),
annotated_counts = sum(is_annotated))
test2<- data.frame(peg = test$peg, ifelse(test[,c('focal_behaviour_counts', 'annotated_counts')] > 0, 1, 0))
quant_sociality<- data.frame(
species = species,
focal_behaviour = sum(test2$focal_behaviour_counts),
total_cds = nrow(test2),
annotated_cds = sum(test2$annotated_counts)
)
return(list(quant_go = quant_sociality, go_term_contribution = go_contribution))
}
path_to_panzzer_output = "~/Documents/PhD/Research/Hostexploitation/data/PANZZER/"
path_to_patric_features = "~/Documents/PhD/Research/Hostexploitation/data/PATRIC/features/"
social_go_list<- as.data.frame(read_excel('~/Documents/PhD/Research/Hamilton_project/MPGS_December18/data/GO/Social_go_list_FINAL.xls'))
social_go_list
head(social_go_list[,1:3])
grep('beta', social_go_list$description)
social_go_list[grep('beta', social_go_list$description),]
social_go_list<- social_go_list[grep('beta', social_go_list$description),]
dat<- read.table('~/Documents/GitHub/HamiltonRuleMicrobiome/output/RELATEDNESS.txt', header=TRUE, stringsAsFactors = FALSE) %>% mutate(first = !duplicated(species_id)) %>% filter(first == TRUE)
mysp<- dat$species_id
run_trait_quantification<- function(focal_behaviour){
trait_quantification<- vector('list', length = nrow(dat))
trait_go_terms_contribution<- vector('list', length = nrow(dat))
for(i in 1:nrow(dat)){
trait_quantification[[i]]<- quant_go_sociality_2(dat$species[i], focal_behaviour, social_go_list, path_to_panzzer_output, path_to_patric_features)[[1]]
trait_go_terms_contribution[[i]]<- quant_go_sociality_2(dat$species[i], focal_behaviour, social_go_list, path_to_panzzer_output, path_to_patric_features)[[2]]
print(i)
}
# Measure of the behaviour
trait_quantification_df<- do.call('rbind', trait_quantification)
# GO terms contribution
trait_go_terms_contribution_df<- trait_go_terms_contribution[[1]]
for(i in 2:length(trait_go_terms_contribution)){
trait_go_terms_contribution_df<- cbind(trait_go_terms_contribution_df, trait_go_terms_contribution[[i]][,4])
colnames(trait_go_terms_contribution_df)<- c(colnames(trait_go_terms_contribution_df)[c(1:ncol(trait_go_terms_contribution_df)-1)], colnames(trait_go_terms_contribution[[i]])[4])
}
trait_go_terms_contribution_df<- trait_go_terms_contribution_df[,c(2, 4:ncol(trait_go_terms_contribution_df))]
rownames(trait_go_terms_contribution_df)<- trait_go_terms_contribution_df$description
trait_go_terms_contribution_df<- trait_go_terms_contribution_df[,-1]
trait_go_terms_contribution_df <- as.data.frame(t(trait_go_terms_contribution_df))
trait_go_terms_contribution_df$species<- rownames(trait_go_terms_contribution_df)
trait_go_terms_contribution_df2<- gather(trait_go_terms_contribution_df, 'GO_id', 'hits', 1:(ncol(trait_go_terms_contribution_df)-1))
plot_ids<- read.table("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_gitRepos/data/species_info_files/species_plot_names.txt", header=TRUE, sep = '\t')
trait_go_terms_contribution_df2<- left_join(trait_go_terms_contribution_df2, plot_ids, 'species')
heatmap<- ggplot(trait_go_terms_contribution_df2, aes(x = GO_id, y = plot_names))+
geom_tile(aes(fill = log(1+hits))) +
scale_fill_gradient(low = "white", high = "darkred")+xlab('')+ylab('')+
theme(#legend.position="none",
legend.title = element_text(size = 6),
legend.text = element_text(size = 6),
legend.key.size = unit(0.7, "cm"),
legend.key.width = unit(0.4,"cm") ,
panel.border= element_blank(),
axis.text.y = element_text(colour="black", size=5),
axis.text.x = element_text(colour="black", face = "bold", size=5, angle = 45, vjust=1, hjust=1),
axis.line.y = element_line(color="black", size = 0.3),
axis.line.x = element_line(color="black", size = 0.3),
axis.ticks.y = element_line(color="black", size = 0.3),
axis.ticks.x = element_line(color="black", size = 0.3),
plot.title = element_text(lineheight=.8, face="bold", hjust = 0.5))
return(list('contribution_heatmap' = heatmap,
'trait_quantification' = trait_quantification_df))
}
social_go_list
qt.beta_lactam<- run_trait_quantification('antibiotic_degradation')
qt.beta_lactam$contribution_heatmap
head( qt.beta_lactam$trait_quantification)
beta<- qt.beta_lactam$trait_quantification %>%
select(species, focal_behaviour) %>%
rename(beta_lactam = focal_behaviour)
d_mean_2<- left_join(d_mean, beta, by = 'species')
dat = d_mean
response = 'beta_lactam'
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
dat = d_mean_2
response = 'beta_lactam'
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == response)]
names(dat)[names(dat) == response] <- 'response_of_interest'
mod.BETA_LACTAM<- MCMCglmm(response_of_interest ~  mean_relatedness + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=phylogeny_inverse_matrix),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
mod.BETA_LACTAM<- MCMCglmm(response_of_interest ~  mean_relatedness + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
summary(mod.nbExtra_Ssyst.R)
summary(mod.BETA_LACTAM)
mod.nbExtra_Ssyst.R<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4 + mean_relatedness + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
dat<- d_mean_109
dat$nb_cds_not_involved_in_response<- dat$total_cds - dat[,which(colnames(dat) == 'nb_extracellular')]
mod.nbExtra_Ssyst<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4 + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
summary(mod.nbExtra_Ssyst)
mod.nbExtra_Ssyst.R<- MCMCglmm(nb_extracellular ~ gram_profile + secretion_system_no4 + mean_relatedness + log(nb_cds_not_involved_in_response),
random = ~species,
ginverse = list(species=Ainv_109),
data = dat,
prior=prior,
family=c("poisson"),
start=list(QUASI=FALSE),
pl = TRUE, pr = TRUE, nodes = 'ALL', DIC = TRUE, nitt=nitt, thin=thin, burnin=burnin)
summary(mod.nbExtra_Ssyst.R)
d
d$host
unique(d$host)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(tidy = TRUE)
source("~/Documents/PhD/Research/background_scripts/basic_packages.R")
source("~/Documents/PhD/Research/background_scripts/ggplot_themes.R")
# Clear and re-load environment everytime because otherwise this is too big to load
library("R.utils")
remove(list = ls())
run_gelman_rubin_test<- function(chains, model_id){
Sol.chains<- vector('list', length = length(chains))
vcv.chains<- vector('list', length = length(chains))
for(i in 1:length(chains)){
Sol.chains[[i]]<- chains[[i]][[model_id]]$Sol
vcv.chains[[i]]<- chains[[i]][[model_id]]$VCV
}
sol.psrd<- gelman.diag(mcmc.list(Sol.chains))$psrf[,2]
vcv.psrd<- gelman.diag(mcmc.list(vcv.chains))$psrf[,2]
gelman_results<- data.frame(model_id = model_id,
fixed.effects.max.upperCI.psrf = max(sol.psrd),
vcv.effects.max.upperCI.psrf = max(vcv.psrd))
return(gelman_results)
}
# GR-test on model 1
mods.R.chain1 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL1_CHAIN_1.RData")[[c('mods.R')]]
mods.R.chain2 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL1_CHAIN_2.RData")[[c('mods.R')]]
mods.R.chain3 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL1_CHAIN_3.RData")[[c('mods.R')]]
mods.R.chains<- list(mods.R.chain1, mods.R.chain2)
gr.test.model1<-
rbind(
run_gelman_rubin_test(mods.R.chains, 'secretome'),
run_gelman_rubin_test(mods.R.chains, 'ab_degradation'),
run_gelman_rubin_test(mods.R.chains, 'biofilm'),
run_gelman_rubin_test(mods.R.chains, 'secretion_system_no4'),
run_gelman_rubin_test(mods.R.chains, 'siderophores'),
run_gelman_rubin_test(mods.R.chains, 'quorum_sensing')) %>%
mutate(model = 'model 1')
gr.test.model1
mar(gr.test.model1)
mar(gr.test.model1$fixed.effects.max.upperCI.psrf)
max(gr.test.model1)
max(gr.test.model1$fixed.effects.max.upperCI.psrf)
max(gr.test.model1$vcv.effects.max.upperCI.psrf)
rm(list = c("mods.R.chain1",
"mods.R.chain2",
#"mods.R.chain3",
"mods.R.chains"))
mods.R.UNCERTAINTY <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL2_CHAIN_1.RData")[[c('mods.R.UNCERTAINTY')]]
rm(mods.R.UNCERTAINTY)
mods.R.UNCERTAINTY.chain1 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL2_CHAIN_1.RData")[[c('mods.R.UNCERTAINTY')]]
mods.R.UNCERTAINTY.chain2 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL2_CHAIN_2.RData")[[c('mods.R.UNCERTAINTY')]]
mods.R.UNCERTAINTY.chains<- list(mods.R.chain1, mods.R.chain2)
mods.R.UNCERTAINTY.chains<- list(mods.R.UNCERTAINTY.chain1, mods.R.UNCERTAINTY.chain2)
chains = mods.R.UNCERTAINTY.chains
Sol.chains<- vector('list', length = length(chains))
vcv.chains<- vector('list', length = length(chains))
for(i in 1:length(chains)){
Sol.chains[[i]]<- chains[[i]][[model_id]]$Sol
vcv.chains[[i]]<- chains[[i]][[model_id]]$VCV
}
model_id = 'secretome'
Sol.chains<- vector('list', length = length(chains))
vcv.chains<- vector('list', length = length(chains))
for(i in 1:length(chains)){
Sol.chains[[i]]<- chains[[i]][[model_id]]$Sol
vcv.chains[[i]]<- chains[[i]][[model_id]]$VCV
}
sol.psrd<- gelman.diag(mcmc.list(Sol.chains))$psrf[,2]
vcv.psrd<- gelman.diag(mcmc.list(vcv.chains))$psrf[,2]
vcv.chains
head(vcv.chains[[1]])
head(Sol.chains[[1]])
head(vcv.chains[[1]])
gelman.diag(mcmc.list(vcv.chains))$psrf[,2]
gelman.diag(mcmc.list(vcv.chains), multivariate = FALSE)$psrf[,2]
rm(model_id)
rm(chains)
gr.test.model1
run_gelman_rubin_test<- function(chains, model_id){
Sol.chains<- vector('list', length = length(chains))
vcv.chains<- vector('list', length = length(chains))
for(i in 1:length(chains)){
Sol.chains[[i]]<- chains[[i]][[model_id]]$Sol
vcv.chains[[i]]<- chains[[i]][[model_id]]$VCV
}
sol.psrd<- gelman.diag(mcmc.list(Sol.chains))$psrf[,2]
vcv.psrd<- gelman.diag(mcmc.list(vcv.chains), multivariate = FALSE)$psrf[,2]
gelman_results<- data.frame(model_id = model_id,
fixed.effects.max.upperCI.psrf = max(sol.psrd),
vcv.effects.max.upperCI.psrf = max(vcv.psrd))
return(gelman_results)
}
mods.R.chain1 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL1_CHAIN_1.RData")[[c('mods.R')]]
mods.R.chain2 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL1_CHAIN_2.RData")[[c('mods.R')]]
mods.R.chains<- list(mods.R.chain1, mods.R.chain2)
gr.test.model1.bis<-
rbind(
run_gelman_rubin_test(mods.R.chains, 'secretome'),
run_gelman_rubin_test(mods.R.chains, 'ab_degradation'),
run_gelman_rubin_test(mods.R.chains, 'biofilm'),
run_gelman_rubin_test(mods.R.chains, 'secretion_system_no4'),
run_gelman_rubin_test(mods.R.chains, 'siderophores'),
run_gelman_rubin_test(mods.R.chains, 'quorum_sensing')) %>%
mutate(model = 'model 1')
gr.test.model1.bis
gr.test.model1
mods.R.UNCERTAINTY.chains<- list(mods.R.UNCERTAINTY.chain1, mods.R.UNCERTAINTY.chain2)
rm(list = c("mods.R.chain1",
"mods.R.chain2",
#"mods.R.chain3",
"mods.R.chains"))
gelman_results<- data.frame(model_id = model_id,
fixed.effects.max.upperCI.psrf = max(sol.psrd),
vcv.effects.max.upperCI.psrf = max(vcv.psrd))
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'secretome')
run_gelman_rubin_test<- function(chains, model_id){
Sol.chains<- vector('list', length = length(chains))
vcv.chains<- vector('list', length = length(chains))
for(i in 1:length(chains)){
Sol.chains[[i]]<- chains[[i]][[model_id]]$Sol
vcv.chains[[i]]<- chains[[i]][[model_id]]$VCV
}
sol.psrd<- gelman.diag(mcmc.list(Sol.chains))$psrf[,2]
vcv.psrd<- gelman.diag(mcmc.list(vcv.chains), multivariate = FALSE)$psrf[,2]
gelman_results<- data.frame(model_id = model_id,
fixed.effects.max.upperCI.psrf = max(sol.psrd),
vcv.effects.max.upperCI.psrf = max(vcv.psrd, na.rm = TRUE))
return(gelman_results)
}
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'secretome')
gr.test.model2<-
rbind(
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'secretome'),
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'ab_degradation'),
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'biofilm'),
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'secretion_system_no4'),
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'siderophores'),
run_gelman_rubin_test(mods.R.UNCERTAINTY.chains, 'quorum_sensing')) %>%
mutate(model = 'model 2')
gr.test.model2
max(gr.test.model2$fixed.effects.max.upperCI.psrf)
max(gr.test.model2$vcv.effects.max.upperCI.psrf)
rm(mods.R.UNCERTAINTY.chain1)
rm(mods.R.UNCERTAINTY.chain2)
rm(mods.R.UNCERTAINTY.chains)
model3.chain1<- list(model_3 = loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL3_CHAIN_1.RData")[[c('m3')]])
model3.chain2 <- list(model_3 = loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL3_CHAIN_2.RData")[[c('m3')]])
summary(model3.chain1)
summary(m3)
summary(model3.chain1$model_3)
summary(model3.chain2$model_3)
model3.chains<- list(model3.chain1, model3.chain2)
gr.test.model3<- run_gelman_rubin_test(model3.chains, 'model_3') %>%
mutate(model = 'model 3')
gr.test.model3
rm(list = c("model3.chain1",
"model3.chain2",
#"model3.chain3",
"model3.chains"))
# GR-test on model 4
mods.R.RA.SPO.chain1 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL4_CHAIN_1.RData")[[c('mods.R.RA.SPO')]]
mods.R.RA.SPO.chain2 <- loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL4_CHAIN_2.RData")[[c('mods.R.RA.SPO')]]
mods.R.RA.SPO.chains<- list(mods.R.RA.SPO.chain1, mods.R.RA.SPO.chain2)
gr.test.model4<-
rbind(
run_gelman_rubin_test(mods.R.RA.SPO.chains, 'secretome'),
run_gelman_rubin_test(mods.R.RA.SPO.chains, 'ab_degradation'),
run_gelman_rubin_test(mods.R.RA.SPO.chains, 'biofilm'),
run_gelman_rubin_test(mods.R.RA.SPO.chains, 'secretion_system_no4'),
run_gelman_rubin_test(mods.R.RA.SPO.chains, 'siderophores'),
run_gelman_rubin_test(mods.R.RA.SPO.chains, 'quorum_sensing')) %>%
mutate(model = 'model 4')
max(gr.test.model4$fixed.effects.max.upperCI.psrf)
max(gr.test.model4$vcv.effects.max.upperCI.psrf)
rm(list = c("mods.R.RA.SPO.chain1",
"mods.R.RA.SPO.chain2",
#"mods.R.RA.SPO.chain3",
"mods.R.RA.SPO.chains"))
# GR-test on model 5
model5.chain1<- list(model_5 = loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL5_CHAIN_1.RData")[[c('m3')]])
model5.chain2 <- list(model_5 = loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL5_CHAIN_2.RData")[[c('m3')]])
mods.5.chains<- list(model5.chain1, model5.chain2)
gr.test.model5<- run_gelman_rubin_test(model5.chains, 'model_5') %>%
mutate(model = 'model 5')
gr.test.model5<- run_gelman_rubin_test(mods.5.chains, 'model_5') %>%
mutate(model = 'model 5')
# GR-test on model 5
model5.chain1<- list(model_5 = loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL5_CHAIN_1.RData")[[c('m5')]])
model5.chain2 <- list(model_5 = loadToEnv("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL5_CHAIN_2.RData")[[c('m5')]])
mods.5.chains<- list(model5.chain1, model5.chain2)
gr.test.model5<- run_gelman_rubin_test(mods.5.chains, 'model_5') %>%
mutate(model = 'model 5')
gr.test.model5
rm(list = c("model5.chain1",
"model5.chain2",
#"mods.5.chain3",
"mods.5.chains"))
max(gr.test.model5$fixed.effects.max.upperCI.psrf)
max(gr.test.model5$vcv.effects.max.upperCI.psrf)
gr.test.all<-
rbind(gr.test.model1,
gr.test.model2,
gr.test.model3,
gr.test.model4,
gr.test.model5) %>%
select(model, model_id, fixed.effects.max.upperCI.psrf, vcv.effects.max.upperCI.psrf) %>%
rename(specific.model = model_id)
gr.test.all
load("~/Documents/PhD/Research/HamiltonRuleMicrobiome/HamiltonRuleMicrobiome_work/output/MODEL5_CHAIN_1.RData")
cov(m5$Sol)
library(aod)
print.session()
sessionInfo()
library(metafor)
sessionInfo()
sessionInfo() %>% grep('metafor')
